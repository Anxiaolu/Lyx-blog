#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
使用方便的JavaCsv API来操作csv文件
\end_layout

\begin_layout Standard
这是一个国外开发的csv文件操作的API,比较全面也挺实用(可以给自己的开发省下很多时间).简单讲述一下用法.
\end_layout

\begin_layout Subsection*
Maven依赖
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<!-- https://mvnrepository.com/artifact/net.sourceforge.javacsv/javacsv -->
\end_layout

\begin_layout Plain Layout

<dependency>
\end_layout

\begin_layout Plain Layout

    <groupId>net.sourceforge.javacsv</groupId>
\end_layout

\begin_layout Plain Layout

    <artifactId>javacsv</artifactId>
\end_layout

\begin_layout Plain Layout

    <version>2.1</version>
\end_layout

\begin_layout Plain Layout

</dependency>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
API说明文档
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
target "http://javacsv.sourceforge.net/"

\end_inset


\end_layout

\begin_layout Standard
具体的代码操作实现:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void read(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        String filePath = "XXX.csv";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            // 创建CSV读对象,这里是最简单的构造方式,当然也可以指定分隔符和编码格式,或者是直接使用inputstream作为它的数据源的方式
来创建.
\end_layout

\begin_layout Plain Layout

            CsvReader csvReader = new CsvReader(filePath);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // 读取时忽略表头,如果不写默认是读取表头的
\end_layout

\begin_layout Plain Layout

            csvReader.readHeaders();
\end_layout

\begin_layout Plain Layout

            while (csvReader.readRecord()){
\end_layout

\begin_layout Plain Layout

                // 读一整行
\end_layout

\begin_layout Plain Layout

                System.out.println(csvReader.getRawRecord());
\end_layout

\begin_layout Plain Layout

                // 读这行的某一列
\end_layout

\begin_layout Plain Layout

                System.out.println(csvReader.get("Link"));
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

            e.printStackTrace();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public static void write(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        String filePath = "/Users/dddd/test.csv";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            // 创建CSV写对象,基本同上.
\end_layout

\begin_layout Plain Layout

            CsvWriter csvWriter = new CsvWriter(filePath,',', Charset.forName("GB
K"));
\end_layout

\begin_layout Plain Layout

            //CsvWriter csvWriter = new CsvWriter(filePath);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // 写表头
\end_layout

\begin_layout Plain Layout

            String[] headers = {"编号","姓名","年龄"};
\end_layout

\begin_layout Plain Layout

            String[] content = {"12365","张山","34"};
\end_layout

\begin_layout Plain Layout

            csvWriter.writeRecord(headers);
\end_layout

\begin_layout Plain Layout

            csvWriter.writeRecord(content);
\end_layout

\begin_layout Plain Layout

            csvWriter.close();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        } catch (IOException e) {
\end_layout

\begin_layout Plain Layout

            e.printStackTrace();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
小结:
\end_layout

\begin_layout Standard
有时候总结整理一些工具类感觉挺不错的,一方面在收集的同时可以学习其他人在写的时候的思维方式,另一方面也方便以后的开发,为自己节省时间,何乐而不为呢!
\end_layout

\end_body
\end_document
