#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
HTTP缓存原理介绍
\end_layout

\begin_layout Standard
通过Internet获取资源既缓慢，成本又高。为此，Http协议里包含了控制缓存的部分，以使Http客户端可以缓存和重用以前获取的资源，从而优化性能，提升体验。
虽然Http中关于缓存控制的部分，随着协议演进，有一些变化。但我觉着，作为后端程序员，在开发Web服务时，只需要关注请求头If-None-Match、响应头ET
ag、响应头Cache-Control就足够了。因为这三个Http头就可以满足你的需求，并且，当今绝大多数的浏览器，都支持这三个Http头。我们所要做的就是，确
保每个服务器响应都提供正确的 HTTP 头指令，以指导浏览器何时可以缓存响应以及可以缓存多久。
\end_layout

\begin_layout Subsection*
缓存在哪儿？
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../../imgs/http/catch_location.png
	lyxscale 65
	scale 65

\end_inset


\end_layout

\begin_layout Standard
上图中有三个角色，浏览器、Web代理和服务器，如图所示Http缓存存在于浏览器和Web代理中。当然在服务器内部，也存在着各种缓存，但这已经不是本文要讨论的Htt
p缓存了。所谓的Http缓存控制，就是一种约定，通过设置不同的响应头Cache-Control来控制浏览器和Web代理对缓存的使用策略，通过设置请求头If-No
ne-Match和响应头ETag，来对缓存的有效性进行验证。
\end_layout

\begin_layout Subsection*
响应头ETag
\end_layout

\begin_layout Standard
ETag全称Entity Tag，用来标识一个资源。在具体的实现中，ETag可以是资源的hash值，也可以是一个内部维护的版本号。但不管怎样，ETag应该能反映
出资源内容的变化，这是Http缓存可以正常工作的基础。
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../../imgs/http/reponse_head.png
	lyxscale 80
	scale 80

\end_inset


\end_layout

\begin_layout Standard
如上例中所展示的，服务器在返回响应时，通常会在Http头中包含一些关于响应的元数据信息，其中，ETag就是其中一个，本例中返回了值为x1323ddx的ETag。
当资源/file的内容发生变化时，服务器应当返回不同的ETag。
\end_layout

\begin_layout Subsection*
请求头If-None-Match
\end_layout

\begin_layout Standard
对于同一个资源，比如上一例中的/file，在进行了一次请求之后，浏览器就已经有了/file的一个版本的内容，和这个版本的ETag，当下次用户再需要这个资源，浏览
器再次向服务器请求的时候，可以利用请求头If-None-Match来告诉服务器自己已经有个ETag为x1323ddx的/file，这样，如果服务器上的/file
没有变化，也就是说服务器上的/file的ETag也是x1323ddx的话，服务器就不会再返回/file的内容，而是返回一个304的响应，告诉浏览器该资源没有变化
，缓存有效。
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../../imgs/http/request_head.png
	lyxscale 70
	scale 70

\end_inset


\end_layout

\begin_layout Standard
如上例中所示，在使用了If-None-Match之后，服务器只需要很小的响应就可以达到相同的结果，从而优化了性能。
\end_layout

\begin_layout Subsection*
响应头Cache-Control
\end_layout

\begin_layout Standard
每个资源都可以通过Http头Cache-Control来定义自己的缓存策略，Cache-Control控制谁在什么条件下可以缓存响应以及可以缓存多久。
 最快的请求是不必与服务器进行通信的请求：通过响应的本地副本，我们可以避免所有的网络延迟以及数据传输的数据成本。为此，HTTP 规范允许服务器返回一系列不同的
 Cache-Control 指令，控制浏览器或者其他中继缓存如何缓存某个响应以及缓存多长时间。
\end_layout

\begin_layout Standard
Cache-Control 头在 HTTP/1.1 规范中定义，取代了之前用来定义响应缓存策略的头（例如 Expires）。当前的所有浏览器都支持
 Cache-Control，因此，使用它就够了。
\end_layout

\begin_layout Standard
以下我来介绍可以再Cache-Control中设置的常用指令。
\end_layout

\begin_layout Subsection*
max-age
\end_layout

\begin_layout Standard
该指令指定从当前请求开始，允许获取的响应被重用的最长时间（单位为秒。例如：Cache-Control:max-age=60表示响应可以再缓存和重用
 60 秒。需要注意的是，在max-age指定的时间之内，浏览器不会向服务器发送任何请求，包括验证缓存是否有效的请求，也就是说，如果在这段时间之内，服务器上的资
源发生了变化，那么浏览器将不能得到通知，而使用老版本的资源。所以在设置缓存时间的长度时，需要慎重。
\end_layout

\begin_layout Subsection*
public和private
\end_layout

\begin_layout Standard
如果设置了public，表示该响应可以再浏览器或者任何中继的Web代理中缓存，public是默认值，即Cache-Control:max-age=60等同于Ca
che-Control:public, max-age=60。
\end_layout

\begin_layout Standard
在服务器设置了private比如Cache-Control:private, max-age=60的情况下，表示只有用户的浏览器可以缓存private响应，不允
许任何中继Web代理对其进行缓存 – 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是 CDN 不能缓存。
\end_layout

\begin_layout Subsection*
no-cache
\end_layout

\begin_layout Standard
如果服务器在响应中设置了no-cache即Cache-Control:no-cache，那么浏览器在使用缓存的资源之前，必须先与服务器确认返回的响应是否被更改，
如果资源未被更改，可以避免下载。这个验证之前的响应是否被修改，就是通过上面介绍的请求头If-None-match和响应头ETag来实现的。
\end_layout

\begin_layout Standard
需要注意的是，no-cache这个名字有一点误导。设置了no-cache之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，需要先确认一下数据是否还
跟服务器保持一致。如果设置了no-cache，而ETag的实现没有反应出资源的变化，那就会导致浏览器的缓存数据一直得不到更新的情况。
\end_layout

\begin_layout Subsection*
no-store
\end_layout

\begin_layout Standard
如果服务器在响应中设置了no-store即Cache-Control:no-store，那么浏览器和任何中继的Web代理，都不会存储这次相应的数据。当下次请求该
资源时，浏览器只能重新请求服务器，重新从服务器读取资源。
\end_layout

\begin_layout Standard
怎样决定一个资源的Cache-Control策略呢？
\end_layout

\begin_layout Standard
下面这个流程图，可以帮到你。
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../../imgs/http/cache_control_strategy.jpg
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Reference
\end_layout

\begin_layout Standard
- https://developers.google.com/web/fundamentals/performance/optimizing-content-ef
ficiency/http-caching?hl=zh-cn
\end_layout

\end_body
\end_document
